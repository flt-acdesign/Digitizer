###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\digit.html
###########################################

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Digitize Experimental Data + Screen Capture</title>
  <!-- External Libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.js"></script>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  
  <!-- Link to external CSS -->
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <h1>Digitize Experimental Data + Screen Capture</h1>

  <!-- Controls for loading images -->
  <div class="controls">
    <input type="file" id="imageLoader" accept="image/*">
    <div>- OR -</div>
  </div>

  <!-- Calibration controls -->
  <div class="controls">
    <button id="setOriginBtn">Set Origin</button>
    <button id="setXScaleBtn">Set X-Scale</button>
    <input type="number" id="xScaleValue" placeholder="X unit value" value="1" step="any" style="width: 100px;">
    <button id="setYScaleBtn">Set Y-Scale</button>
    <input type="number" id="yScaleValue" placeholder="Y unit value" value="1" step="any" style="width: 100px;">
  </div>

  <!-- Curve naming controls -->
  <div class="controls">
    <div>
      <label for="datasetName">Dataset Name:</label>
      <input type="text" id="datasetName" placeholder="Dataset name" value="Dataset 1">
    </div>
    <div>
      <label for="curveName">Curve Name:</label>
      <input type="text" id="curveName" placeholder="Curve name" value="Curve 1">
    </div>
  </div>

  <!-- Action buttons -->
  <div class="controls">
    <button id="addPointBtn">Add Data Points</button>
    <button id="newCurveBtn">New Curve</button>
    <button id="resetBtn">Reset Current</button>
    <button id="exportCSVBtn">Export CSV</button>
    <button id="flipVerticalBtn">Flip Image Vertically</button>
  </div>

  <div id="status">Ready to load image. Use file input or paste image.</div>

  <!-- Main sections: left for the p5 canvas, right for the Plotly chart -->
  <div class="main-sections">
    <!-- P5 Canvas Container -->
    <div id="canvasContainer" style="flex: 1; position: relative;">
      <div id="pasteArea">Click here and paste image (Ctrl+V)</div>
      <!-- p5.js canvas will be injected here -->
      <div class="zoom-controls">
        <button id="zoomIn">+</button>
        <button id="zoomOut">-</button>
        <button id="resetZoom">Reset View</button>
      </div>
      <div id="currentCurveIndicator">
        <div>Dataset: <span id="datasetNameDisplay">Dataset 1</span></div>
        <div>Curve: <span id="curveNameDisplay">Curve 1</span></div>
        <div style="display: flex; align-items: center;">
          <div id="curveColorDisplay"></div>
          <div>Points: <span id="pointCountDisplay">0</span></div>
        </div>
      </div>
    </div>

    <!-- Live Results Plot & screenshot preview -->
    <div id="liveResultsContainer">
      <div id="liveResultsPlot"></div>
      <img id="screenshotPreview" alt="Screen Capture Preview">
    </div>
  </div>

  <!-- Button for starting screenshot selection -->
  <button id="start-selection-btn">Start Screenshot Selection</button>

  <!-- Include JavaScript files -->
  <script src="js/p5-sketch.js"></script>
  <script src="js/ui.js"></script>
  <script src="js/dataProcessing.js"></script>
  <script src="js/screenshot.js"></script>
  <script src="js/main.js"></script>
</body>
</html>

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\css\style.css
###########################################

/* Basic reset & layout */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  body {
    font-family: Arial, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background-color: #FAFAFA;
  }
  h1 {
    margin-bottom: 10px;
    text-align: center;
    font-weight: 600;
    color: #333;
  }
  /* Instruction box */
  .instructions {
    background-color: #fefefe;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
  }
  .instructions ul {
    margin-left: 20px;
  }
  /* Controls styling */
  .controls {
    margin-bottom: 15px;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
    justify-content: flex-start;
  }
  button,
  input[type="file"],
  input[type="number"],
  input[type="text"],
  input[type="color"] {
    padding: 8px 12px;
    cursor: pointer;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: #fff;
    font-size: 14px;
    transition: background-color 0.2s, border-color 0.2s;
  }
  button:hover,
  input[type="file"]:hover,
  input[type="number"]:hover,
  input[type="text"]:hover,
  input[type="color"]:hover {
    background-color: #f0f0f0;
    border-color: #999;
  }
  label {
    font-weight: bold;
    margin-right: 5px;
  }
  /* Paste area styling now for the digitizing area */
  #pasteArea {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 2px dashed #aaa;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    background-color: rgba(250, 250, 250, 0.8);
    cursor: pointer;
    z-index: 50;
  }
  #pasteArea:hover {
    background-color: rgba(250, 250, 250, 0.9);
  }
  /* Canvas container */
  #canvasContainer {
    position: relative;
    border: 1px solid #ccc;
    overflow: hidden;
    margin-bottom: 20px;
    height: 600px;
    background: #fafafa;
  }
  /* Zoom controls */
  .zoom-controls {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: rgba(255, 255, 255, 0.7);
    padding: 5px;
    border-radius: 5px;
    z-index: 100;
    display: flex;
    gap: 5px;
  }
  /* Status area */
  #status {
    margin: 10px 0;
    font-style: italic;
    color: #555;
    background-color: #f0f0f0;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }
  /* Current curve info box */
  #currentCurveIndicator {
    position: absolute;
    top: 10px;
    left: 10px;
    background: rgba(255, 255, 255, 0.7);
    padding: 5px;
    border-radius: 5px;
    z-index: 100;
  }
  #currentCurveIndicator div {
    margin-bottom: 4px;
  }
  /* The color display remains as an indicator */
  #curveColorDisplay {
    width: 15px;
    height: 15px;
    background: #FFA500;
    margin-right: 5px;
  }
  /* Plot area */
  #liveResultsContainer {
    flex: 1;
    max-width: 50%;
  }
  #liveResultsPlot {
    width: 100%;
    height: 600px;
  }
  /* Make the two main sections sit side by side */
  .main-sections {
    display: flex;
    gap: 20px;
  }
  /* Selection box for screenshot */
  .selection-box {
    position: fixed;
    border: 2px dashed #007bff;
    background: rgba(0, 123, 255, 0.1);
    pointer-events: none; 
    z-index: 9999;
  }
  /* Screenshot preview */
  #screenshotPreview {
    margin-top: 20px;
    max-width: 100%;
    border: 1px solid #ccc;
    border-radius: 5px;
    display: none;
  }
  

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\js\dataProcessing.js
###########################################

// Live Plot Updating using Plotly and CSV Export

function updateLiveResults() {
    const allData = [...dataSets];
    if (currentData.length > 0) {
      allData.push({
        datasetName: currentDatasetName,
        name: currentCurveName,
        color: currentDatasetColor,
        data: [...currentData]
      });
    }
    if (allData.length === 0) return;
    let plotData = allData.map(dataset => {
      return {
        x: dataset.data.map(pt => pt.x),
        y: dataset.data.map(pt => pt.y),
        mode: 'lines+markers',
        name: dataset.datasetName ? `${dataset.datasetName}: ${dataset.name}` : (dataset.name || "Unnamed"),
        line: { color: dataset.color },
        marker: { color: dataset.color }
      };
    });
    Plotly.newPlot('liveResultsPlot', plotData, {
      title: 'Live Digitized Results',
      xaxis: { title: 'X' },
      yaxis: { title: 'Y' },
      margin: { t: 30, r: 30, b: 40, l: 50 },
      legend: { x: 0, y: 1 }
    });
  }
  
  function exportCSV() {
    if (dataSets.length === 0 && currentData.length === 0) {
      updateStatus("No data to export!");
      return;
    }
    const tempDataSets = [...dataSets];
    if (currentData.length > 0) {
      tempDataSets.push({
        datasetName: document.getElementById('datasetName').value || currentDatasetName,
        name: document.getElementById('curveName').value || currentCurveName,
        color: currentDatasetColor,
        data: [...currentData]
      });
    }
    let csvContent = "dataset,curve,x,y\n";
    tempDataSets.forEach(dataset => {
      const datasetName = dataset.datasetName || "Unnamed Dataset";
      const curveName = dataset.name || "Unnamed Curve";
      dataset.data.forEach(point => {
        csvContent += `"${datasetName}","${curveName}",${point.x},${point.y}\n`;
      });
    });
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
    link.setAttribute('href', url);
    link.setAttribute('download', `digitized_data_${timestamp}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    updateStatus("CSV file exported!");
  }
  
  function createNewCurve() {
    if (currentData.length > 0) {
      dataSets.push({
        datasetName: currentDatasetName,
        name: currentCurveName,
        color: currentDatasetColor,
        data: [...currentData]
      });
      currentData = [];
      const curveNameInput = prompt("Enter a name for the new curve:", `Curve ${curveCounter + 1}`);
      if (curveNameInput === null) {
        dataSets.pop();
        currentData = dataSets[dataSets.length - 1].data;
        return;
      }
      curveCounter++;
      currentCurveName = curveNameInput.trim() || `Curve ${curveCounter}`;
      document.getElementById('curveName').value = currentCurveName;
      currentDatasetColor = getRandomColor();
      updateStatus(`Started new curve: ${currentCurveName} in dataset: ${currentDatasetName}`);
      updateCurveIndicator();
      redrawCanvas();
      updateLiveResults();
    } else {
      currentDatasetName = document.getElementById('datasetName').value;
      currentCurveName = document.getElementById('curveName').value;
      updateCurveIndicator();
      updateStatus(`Ready to digitize: ${currentCurveName} in dataset: ${currentDatasetName}`);
    }
  }
  
  function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }
  
  function resetView() {
    if (img) {
      const imgRatio = img.width / img.height;
      const canvasRatio = canvasWidth / canvasHeight;
      let fitScale;
      if (imgRatio > canvasRatio) {
        fitScale = (canvasWidth / img.width) * 0.9;
      } else {
        fitScale = (canvasHeight / img.height) * 0.9;
      }
      zoomLevel = fitScale;
      offsetX = (canvasWidth / zoomLevel - img.width) / 2;
      offsetY = (canvasHeight / zoomLevel - img.height) / 2;
    } else {
      zoomLevel = 1;
      offsetX = 0;
      offsetY = 0;
    }
    redrawCanvas();
  }
  

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\js\main.js
###########################################

// main.js - Initialization and global setup if needed
console.log("Digitize Experimental Data app initialized.");

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\js\p5-sketch.js
###########################################

// p5.js Variables and Settings
let img;
let mode = "none";
let origin, xScalePoint, yScalePoint;
let scaleX, scaleY;
let dataSets = [];
let currentData = [];
let currentDatasetName = "Dataset 1";
let currentCurveName = "Curve 1";
let currentDatasetColor = "#FFA500";
let datasetCounter = 1;
let curveCounter = 1;

// Zoom & pan variables
let zoomLevel = 1;
let offsetX = 0;
let offsetY = 0;
const canvasWidth = 800;
const canvasHeight = 600;

// Panning variables
let isPanning = false;
let panStartX, panStartY;

// New global flag to track vertical flip
let flipVertical = false;

function setup() {
  let canvas = createCanvas(canvasWidth, canvasHeight);
  canvas.parent('canvasContainer');
  background(220);
  noLoop(); // Manual redraw
  setupCanvasEvents(canvas);

  // Add event listener for the flip button
  document.getElementById('flipVerticalBtn').onclick = () => {
    flipVertical = !flipVertical;
    redrawCanvas();
  };
}

function draw() {
  // p5.js draw loop (unused due to noLoop)
}

function mouseMoved() {
  if (img && !isSelecting && !isPanning) {
    redrawCanvas();
  }
}

function mousePressed() {
  if (isSelecting) return;
  if (!img) return;

  if (mouseButton === LEFT) {
    const imgX = (mouseX / zoomLevel) - offsetX;
    const imgY = (mouseY / zoomLevel) - offsetY;

    if (mode === "origin") {
      origin = createVector(imgX, imgY);
      redrawCanvas();
      drawPoint(origin.x, origin.y, 10, color(255, 0, 0));
      updateStatus("Origin set. Now set X-Scale.");
      mode = "none";
    } else if (mode === "xscale") {
      if (!origin) {
        updateStatus("Please set origin first!");
        return;
      }
      const restrictedY = origin.y;
      xScalePoint = createVector(imgX, restrictedY);
      redrawCanvas();
      drawPoint(origin.x, origin.y, 10, color(255, 0, 0));
      drawLine(origin.x, origin.y, xScalePoint.x, xScalePoint.y, color(0, 255, 0));
      drawPoint(xScalePoint.x, xScalePoint.y, 8, color(0, 255, 0));
      let distPx = Math.abs(xScalePoint.x - origin.x);
      const xUnitValue = parseFloat(document.getElementById('xScaleValue').value) || 1;
      scaleX = xUnitValue / distPx;
      updateStatus(`X-Scale set to ${xUnitValue} units. Now set Y-Scale.`);
      mode = "none";
    } else if (mode === "yscale") {
      if (!origin) {
        updateStatus("Please set origin first!");
        return;
      }
      const restrictedX = origin.x;
      yScalePoint = createVector(restrictedX, imgY);
      redrawCanvas();
      drawPoint(origin.x, origin.y, 10, color(255, 0, 0));
      if (xScalePoint) {
        drawLine(origin.x, origin.y, xScalePoint.x, xScalePoint.y, color(0, 255, 0));
        drawPoint(xScalePoint.x, xScalePoint.y, 8, color(0, 255, 0));
      }
      drawLine(origin.x, origin.y, yScalePoint.x, yScalePoint.y, color(0, 0, 255));
      drawPoint(yScalePoint.x, yScalePoint.y, 8, color(0, 0, 255));
      let distPx = Math.abs(yScalePoint.y - origin.y);
      const yUnitValue = parseFloat(document.getElementById('yScaleValue').value) || 1;
      scaleY = yUnitValue / distPx;
      updateStatus(`Y-Scale set to ${yUnitValue} units. Ready to add data points.`);
      mode = "none";
    } else if (mode === "addpoint") {
      if (!origin || !scaleX || !scaleY) {
        updateStatus("Please set origin and scales first!");
        return;
      }
      if (!keyIsDown(CONTROL)) {
        updateStatus("Hold CTRL key while clicking to add a data point");
        return;
      }
      drawPoint(imgX, imgY, 6, color(currentDatasetColor));
      let dataX = (imgX - origin.x) * scaleX;
      let dataY = (origin.y - imgY) * scaleY;
      currentData.push({ x: dataX, y: dataY });
      updateStatus(`Point added: (${dataX.toFixed(3)}, ${dataY.toFixed(3)}). Total: ${currentData.length}`);
      updateLiveResults();
    }
  }
}

// Drawing Helpers
function drawPoint(x, y, size, clr) {
  push();
  translate(offsetX * zoomLevel, offsetY * zoomLevel);
  scale(zoomLevel);
  fill(clr);
  noStroke();
  ellipse(x, y, size, size);
  pop();
}

function drawLine(x1, y1, x2, y2, clr) {
  push();
  translate(offsetX * zoomLevel, offsetY * zoomLevel);
  scale(zoomLevel);
  stroke(clr);
  strokeWeight(2);
  line(x1, y1, x2, y2);
  pop();
}

function drawCrosshair() {
  push();
  stroke(255, 0, 0, 180);
  strokeWeight(0.5);
  line(0, mouseY, width, mouseY);
  line(mouseX, 0, mouseX, height);
  if (origin) {
    const realMouseX = (mouseX / zoomLevel) - offsetX;
    const realMouseY = (mouseY / zoomLevel) - offsetY;
    if (scaleX) {
      const valueX = ((realMouseX - origin.x) * scaleX).toFixed(2);
      fill(0, 0, 0, 150);
      noStroke();
      textSize(12);
      text(`X: ${valueX}`, mouseX + 5, mouseY - 5);
    }
    if (scaleY) {
      const valueY = ((origin.y - realMouseY) * scaleY).toFixed(2);
      fill(0, 0, 0, 150);
      noStroke();
      textSize(12);
      text(`Y: ${valueY}`, mouseX + 5, mouseY + 15);
    }
  }
  pop();
}

function redrawCanvas() {
  background(220);
  if (img) {
    push();
    translate(offsetX * zoomLevel, offsetY * zoomLevel);
    scale(zoomLevel);
    if (flipVertical) {
      // Flip vertically: translate down by image height then scale Y by -1
      push();
      translate(0, img.height);
      scale(1, -1);
      image(img, 0, 0, img.width, img.height);
      pop();
    } else {
      image(img, 0, 0, img.width, img.height);
    }
    pop();
    if (origin) {
      drawPoint(origin.x, origin.y, 10, color(255, 0, 0));
    }
    if (xScalePoint) {
      drawLine(origin.x, origin.y, xScalePoint.x, xScalePoint.y, color(0, 255, 0));
      drawPoint(xScalePoint.x, xScalePoint.y, 8, color(0, 255, 0));
    }
    if (yScalePoint) {
      drawLine(origin.x, origin.y, yScalePoint.x, yScalePoint.y, color(0, 0, 255));
      drawPoint(yScalePoint.x, yScalePoint.y, 8, color(0, 0, 255));
    }
    if (origin && scaleX && scaleY && currentData.length > 0) {
      for (let point of currentData) {
        let screenX = origin.x + point.x / scaleX;
        let screenY = origin.y - point.y / scaleY;
        drawPoint(screenX, screenY, 6, color(currentDatasetColor));
      }
    }
    drawCrosshair();
  }
}

function setupCanvasEvents(canvas) {
  // Mouse wheel zoom
  canvas.canvas.addEventListener('wheel', function(event) {
    if (isSelecting) return;
    event.preventDefault();
    const rect = this.getBoundingClientRect();
    const mouseXOnCanvas = event.clientX - rect.left;
    const mouseYOnCanvas = event.clientY - rect.top;
    const posXBefore = (mouseXOnCanvas / zoomLevel) - offsetX;
    const posYBefore = (mouseYOnCanvas / zoomLevel) - offsetY;
    if (event.deltaY < 0) {
      zoomLevel *= 1.1;
    } else {
      zoomLevel /= 1.1;
    }
    zoomLevel = constrain(zoomLevel, 0.1, 10);
    const posXAfter = (mouseXOnCanvas / zoomLevel) - offsetX;
    const posYAfter = (mouseYOnCanvas / zoomLevel) - offsetY;
    offsetX += (posXAfter - posXBefore);
    offsetY += (posYAfter - posYBefore);
    redrawCanvas();
  });

  // Right mouse button panning
  canvas.canvas.addEventListener('mousedown', function(event) {
    if (event.button === 2) {
      isPanning = true;
      panStartX = event.clientX;
      panStartY = event.clientY;
    }
  });
  canvas.canvas.addEventListener('mousemove', function(event) {
    if (isPanning) {
      const dx = event.clientX - panStartX;
      const dy = event.clientY - panStartY;
      offsetX += dx / zoomLevel;
      offsetY += dy / zoomLevel;
      panStartX = event.clientX;
      panStartY = event.clientY;
      redrawCanvas();
    }
  });
  canvas.canvas.addEventListener('mouseup', function(event) {
    if (event.button === 2) {
      isPanning = false;
    }
  });
  canvas.canvas.addEventListener('contextmenu', function(event) {
    event.preventDefault();
  });
}

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\js\screenshot.js
###########################################

// Screenshot Selection and Capture

let isSelecting = false;
let selectionBox = null;
let startX, startY, endX, endY;

const startSelectionBtn = document.getElementById('start-selection-btn');
const screenshotPreview = document.getElementById('screenshotPreview');

startSelectionBtn.addEventListener('click', () => {
  isSelecting = true;
  startSelectionBtn.style.display = 'none';
  updateStatus("Drag on the page to select an area for screenshot.");
});

document.addEventListener('mousedown', (e) => {
  if (isSelecting && e.button === 0) {
    startX = e.clientX;
    startY = e.clientY;
    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
  }
});

function onMouseMove(e) {
  if (isSelecting) {
    endX = e.clientX;
    endY = e.clientY;
    const width = Math.abs(endX - startX);
    const height = Math.abs(endY - startY);
    createSelectionBox(
      Math.min(startX, endX),
      Math.min(startY, endY),
      width,
      height
    );
  }
}

function onMouseUp() {
  if (isSelecting) {
    document.removeEventListener('mousemove', onMouseMove);
    document.removeEventListener('mouseup', onMouseUp);
    if (selectionBox) {
      const rect = selectionBox.getBoundingClientRect();
      html2canvas(document.body, {
        x: rect.left,
        y: rect.top,
        width: rect.width,
        height: rect.height,
        scrollX: -window.scrollX,
        scrollY: -window.scrollY
      }).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        screenshotPreview.src = imgData;
        screenshotPreview.style.display = 'block';
        selectionBox.remove();
        selectionBox = null;
        isSelecting = false;
        startSelectionBtn.style.display = 'inline-block';
        updateStatus("Screenshot captured! Digitizing mode is active again.");
      });
    } else {
      isSelecting = false;
      startSelectionBtn.style.display = 'inline-block';
      updateStatus("No area selected. Please try again.");
    }
  }
}

function createSelectionBox(x, y, width, height) {
  if (selectionBox) {
    selectionBox.remove();
  }
  selectionBox = document.createElement('div');
  selectionBox.className = 'selection-box';
  selectionBox.style.left = x + 'px';
  selectionBox.style.top = y + 'px';
  selectionBox.style.width = width + 'px';
  selectionBox.style.height = height + 'px';
  document.body.appendChild(selectionBox);
}

###########################################
# FILE: F:\PhD\01_DEV\JS\Digitizer\digitizer\js\ui.js
###########################################

// File Loading and UI Event Handlers

function loadImageFromFile(file) {
    const datasetNameInput = prompt("Enter a name for this dataset:", `Dataset ${datasetCounter}`);
    if (datasetNameInput === null) return;
    currentDatasetName = datasetNameInput.trim() || `Dataset ${datasetCounter}`;
    document.getElementById('datasetName').value = currentDatasetName;
    
    const curveNameInput = prompt("Enter a name for the first curve:", `Curve ${curveCounter}`);
    if (curveNameInput === null) return;
    currentCurveName = curveNameInput.trim() || `Curve ${curveCounter}`;
    document.getElementById('curveName').value = currentCurveName;
    
    if (currentData.length > 0) {
      dataSets.push({
        datasetName: currentDatasetName,
        name: currentCurveName,
        color: currentDatasetColor,
        data: [...currentData]
      });
    }
    currentData = [];
    origin = null;
    xScalePoint = null;
    yScalePoint = null;
    scaleX = null;
    scaleY = null;
    mode = "none";
    datasetCounter++;
    curveCounter = 1;
    updateCurveIndicator();
    resetView();
    background(220);
    
    let reader = new FileReader();
    reader.onload = function(event) {
      loadImageData(event.target.result);
    };
    reader.readAsDataURL(file);
  }
  
  function loadImageData(data) {
    loadImage(data, (loadedImg) => {
      img = loadedImg;
      // Hide the paste area once an image is loaded.
      document.getElementById('pasteArea').style.display = 'none';
      resetView();
      redrawCanvas();
      updateStatus("Image loaded. Set origin point first.");
    });
  }
  
  // File Input and Clipboard Events
  document.getElementById('imageLoader').onchange = function(e) {
    if (e.target.files.length > 0) {
      loadImageFromFile(e.target.files[0]);
    }
  };
  
  const pasteArea = document.getElementById('pasteArea');
  pasteArea.addEventListener('click', function() {
    this.focus();
    updateStatus("Paste image with Ctrl+V");
  });
  document.addEventListener('paste', function(e) {
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        loadImageFromFile(blob);
        e.preventDefault();
        return;
      }
    }
    updateStatus("No image found in clipboard!");
  });
  
  // Calibration and Data Capture Events
  document.getElementById('setOriginBtn').onclick = () => {
    mode = "origin";
    updateStatus("Click on the image to set the origin (0,0)");
  };
  document.getElementById('setXScaleBtn').onclick = () => {
    mode = "xscale";
    const xValue = document.getElementById('xScaleValue').value;
    updateStatus(`Click on the image to set X-Scale (${xValue} units from origin)`);
  };
  document.getElementById('setYScaleBtn').onclick = () => {
    mode = "yscale";
    const yValue = document.getElementById('yScaleValue').value;
    updateStatus(`Click on the image to set Y-Scale (${yValue} units from origin)`);
  };
  
  document.getElementById('addPointBtn').onclick = () => {
    mode = "addpoint";
    currentDatasetName = document.getElementById('datasetName').value;
    currentCurveName = document.getElementById('curveName').value;
    updateCurveIndicator();
    updateStatus(`Hold CTRL key and click to add data points for "${currentCurveName}" in dataset "${currentDatasetName}"`);
  };
  
  // Restoring the functionality of New Curve, Reset Current, and Export CSV buttons
  document.getElementById('newCurveBtn').onclick = createNewCurve;
  document.getElementById('resetBtn').onclick = () => {
    currentData = [];
    redrawCanvas();
    updateStatus("Current data points cleared. Calibration maintained.");
    updateCurveIndicator();
    updateLiveResults();
  };
  document.getElementById('exportCSVBtn').onclick = exportCSV;
  
  document.getElementById('datasetName').addEventListener('input', function() {
    currentDatasetName = this.value;
    updateCurveIndicator();
  });
  document.getElementById('curveName').addEventListener('input', function() {
    currentCurveName = this.value;
    updateCurveIndicator();
  });
  
  document.getElementById('zoomIn').onclick = () => {
    zoomLevel *= 1.2;
    redrawCanvas();
  };
  document.getElementById('zoomOut').onclick = () => {
    zoomLevel /= 1.2;
    redrawCanvas();
  };
  document.getElementById('resetZoom').onclick = () => {
    resetView();
  };
  
  // Helper Functions for UI Updates
  function updateStatus(message) {
    document.getElementById('status').textContent = message;
  }
  
  function updateCurveIndicator() {
    document.getElementById('datasetNameDisplay').textContent = currentDatasetName;
    document.getElementById('curveNameDisplay').textContent = currentCurveName;
    document.getElementById('curveColorDisplay').style.backgroundColor = currentDatasetColor;
    document.getElementById('pointCountDisplay').textContent = currentData.length;
  }
  

